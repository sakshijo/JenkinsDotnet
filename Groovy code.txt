//groovy command to update clearcase code repository and label the files with build no.
def env = System.getenv()

def buildnumber = env['BUILD_NUMBER']

def buildtarget = env['BUILD_TARGET']

def servicename  =env['SERVICE_NAME']

def projectname  =env['PROJECT_NAME']

def cc_username  =env['CC_USERNAME']

def cc_password  =env['IECCADM_PASSWORD']

def cc_viewdir =env['CC_VIEW_DIR']

def cc_updatedir = env['CC_UPDATE_DIR']

def cc_server = env['CC_SERVER']

def cc_find_file = env['CC_FIND_FILE']

cc_find_file = cc_find_file.concat("\\hist.").concat(buildnumber)

def drop_branch = "drop_".concat(buildnumber.substring(1,3))
def codedir

//Left the switch in here just in case we need to separate out later on...

switch (buildtarget) {

  case "MPPAE":

    codedir = cc_updatedir

  break

  case "OE":

        codedir = cc_updatedir

  break

  case "UAT":

        codedir = cc_updatedir

  break

}

println codedir
private def executeOnShell(List command, File workingDir) {

  println command

  def process = new ProcessBuilder(command)

                                    .directory(workingDir)

                                    .redirectErrorStream(true)

                                    .start()

  process.inputStream.eachLine {println it}

  process.waitFor();

  return process.exitValue()

}

//Logout, ignore error

def logoutcmd = ["rcleartool.bat","logout","-server",cc_server]

def retValue = executeOnShell(logoutcmd  , new File(cc_viewdir))

println "retValue $retValue"

//Login

def logincmd = ["rcleartool.bat","login","-lname",cc_username,"-password",cc_password,"-server",cc_server]

retValue = executeOnShell(logincmd  , new File(cc_viewdir))

println "retValue $retValue"

if (retValue != 0)

throw new Exception("Unable to login using $cc_username!") 

def bcmd = "lbtype".concat(":").concat(buildnumber)

def lslabelcmd = ["rcleartool.bat", "lstype", bcmd]

def mklabelcmd = ["rcleartool.bat", "mklbtype", "-comment" , "\"Created by Jenkins\"", buildnumber]

retValue = executeOnShell(lslabelcmd, new File(cc_viewdir))

println "retValue $retValue"

if (retValue == 1) {

  //Label doesn't exist (any failure) so lets create it

retValue = executeOnShell(mklabelcmd, new File(cc_viewdir))

println "retValue $retValue"

}

                                                         

//Grab code based on label

def vcmd = "\"version(/main/".concat(drop_branch).concat("/LATEST)\"")

//def lcmd = "\"cmd /c rcleartool.bat mklabel -replace ".concat(buildnumber).concat(" \"\"%CLEARCASE_XPN%\"\" \"")

//def labelcmd =["rcleartool.bat", "find", ".", "-version", vcmd, "-print", "-exec", lcmd]

def labelcmd =["rcleartool.bat", "find", ".", "-version", vcmd, "-print", ">", cc_find_file]

retValue = executeOnShell(labelcmd, new File(codedir))

println "retValue $retValue"

if (retValue != 0)

throw new Exception("Unable to find code on $drop_branch!")              

File histFile = new File(cc_find_file)

if (histFile.exists()) {

    histFile.eachLine { line ->

      def filelabelcmd = ["rcleartool.bat","mklabel","-replace",buildnumber,line]

        retValue = executeOnShell(filelabelcmd, new File(codedir))

      if (retValue != 0)

      throw new Exception("Unable to label $line with $buildnumber")

    }

}

//Logout

retValue = executeOnShell(logoutcmd  , new File(cc_viewdir))

println "retValue $retValue"

if (retValue != 0)

throw new Exception("Unable to logout using $cc_username!")

































